from py_expression_eval import Parser
import numpy as np

parser = Parser()
h = 0.1

# Programmet använder sig av py-expression-eval för att evaluera funktioner (och alltså beräkna y-värden)
# samt numpys linalg.solve för att lösa ekvationssystem

print("Detta program integrerar numeriskt genom att approximera en funktion f(x) "
      "\ntill ett andragradspolynom g(x) = ax^2 + bx + c och sedan använda trapetsmetoden med steglängd h = 0.1\n")
print("Skriv in en funktion f(x) och undre samt övre gräns på formen f(x), a, b. Tillåtna operatorer:")
print("+, -, *, /, % (modulo), ^ (exponent), PI (konstanten π), E (konstanten e), "
      "sin(x), cos(x), tan(x), asin(x), acos(x), atan(x)")
print("log(x) (naturliga logaritmen ln(x)), log(x, bas), "
      "ceil(x), floor(x), round(x), exp(x) (expontentfunktionen e^(x)).\n")

input = input().split(", ")

# Integranden
f = input[0]

# Integrandens undre och övre gräns
n = float(input[1])
m = float(input[2])

result = 0
for x in np.arange(n, m, h):
    # De tre x-värdena för koefficientmatrisen
    x1 = x
    x2 = x + (h / 2)
    x3 = x + h

    coefficients = np.array([[pow(x1, 2), x1, 1], [pow(x2, 2), x2, 1], [pow(x3, 2), x3, 1]])

    # De tre y-värdena för konstantmatrisen:
    y1 = parser.parse(f).evaluate({'x': x1})
    y2 = parser.parse(f).evaluate({'x': x2})
    y3 = parser.parse(f).evaluate({'x': x3})

    constants = np.array([y1, y2, y3])

    # De utlösa variablerna a, b och c
    variables = np.linalg.solve(coefficients, constants)

    a = variables[0]
    b = variables[1]
    c = variables[2]

    # Den primitiva funktionen till ett andragradspolynom p(x) = ax^2 + bx + c
    P = "(a/3)*x^3 + (b/2)*x^2 + c*x"

    # Integralen för p(x) mellan x1 och x3
    P1 = parser.parse(P).evaluate({'x': x1, 'a': a, 'b': b, 'c': c})
    P2 = parser.parse(P).evaluate({"x": x3, "a": a, "b": b, "c": c})
    integral = P2 - P1

    result += integral

print("Resultat av numerisk integrering: " + str(result))

